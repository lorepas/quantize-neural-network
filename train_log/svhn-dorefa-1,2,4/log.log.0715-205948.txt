[32m[0715 20:53:06 @logger.py:92][0m Argv: /usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py -f /root/.local/share/jupyter/runtime/kernel-26fea097-c6a8-45a0-af58-78097930f7c8.json
[32m[0715 20:53:06 @parallel.py:340][0m [MultiProcessRunnerZMQ] Will fork a dataflow more than one times. This assumes the datapoints are i.i.d.
[32m[0715 20:53:06 @input_source.py:221][0m Setting up the queue 'QueueInput/input_queue' for CPU prefetching ...
[32m[0715 20:53:06 @trainers.py:48][0m Building graph for a single training tower ...
[32m[0715 20:53:06 @<ipython-input-4-d341d09236ea>:114][0m Binarizing weight conv0/W
[32m[0715 20:53:06 @<ipython-input-4-d341d09236ea>:114][0m Binarizing weight conv1/W
[32m[0715 20:53:06 @<ipython-input-4-d341d09236ea>:114][0m Binarizing weight conv2/W
[32m[0715 20:53:06 @registry.py:90][0m 'conv2': [?, 18, 18, 64] --> [?, 18, 18, 64]
[32m[0715 20:53:07 @registry.py:90][0m 'pool1': [?, 18, 18, 64] --> [?, 9, 9, 64]
[32m[0715 20:53:07 @<ipython-input-4-d341d09236ea>:114][0m Binarizing weight conv3/W
[32m[0715 20:53:07 @registry.py:90][0m 'conv3': [?, 9, 9, 64] --> [?, 7, 7, 128]
[32m[0715 20:53:07 @<ipython-input-4-d341d09236ea>:114][0m Binarizing weight conv4/W
[32m[0715 20:53:07 @registry.py:90][0m 'conv4': [?, 7, 7, 128] --> [?, 7, 7, 128]
[32m[0715 20:53:07 @<ipython-input-4-d341d09236ea>:114][0m Binarizing weight conv5/W
[32m[0715 20:53:07 @registry.py:90][0m 'conv5': [?, 7, 7, 128] --> [?, 5, 5, 128]
[32m[0715 20:53:07 @<ipython-input-4-d341d09236ea>:114][0m Binarizing weight conv6/W
[32m[0715 20:53:07 @registry.py:90][0m 'conv6': [?, 5, 5, 128] --> [?, 1, 1, 512]
[32m[0715 20:53:07 @<ipython-input-4-d341d09236ea>:114][0m Binarizing weight fc1/W
[32m[0715 20:53:07 @registry.py:90][0m 'fc1': [?, 1, 1, 512] --> [?, 10]
[32m[0715 20:53:07 @regularize.py:97][0m regularize_cost() found 1 variables to regularize.
[32m[0715 20:53:07 @regularize.py:21][0m The following tensors will be regularized: fc1/W:0
[32m[0715 20:53:08 @model_utils.py:67][0m [36mList of Trainable Variables: 
[0mname       shape               #elements
---------  ----------------  -----------
conv0/W    [5, 5, 3, 48]            3600
conv0/b    [48]                       48
conv1/W    [3, 3, 48, 64]          27648
bn1/gamma  [64]                       64
bn1/beta   [64]                       64
conv2/W    [3, 3, 64, 64]          36864
bn2/gamma  [64]                       64
bn2/beta   [64]                       64
conv3/W    [3, 3, 64, 128]         73728
bn3/gamma  [128]                     128
bn3/beta   [128]                     128
conv4/W    [3, 3, 128, 128]       147456
bn4/gamma  [128]                     128
bn4/beta   [128]                     128
conv5/W    [3, 3, 128, 128]       147456
bn5/gamma  [128]                     128
bn5/beta   [128]                     128
conv6/W    [5, 5, 128, 512]      1638400
bn6/gamma  [512]                     512
bn6/beta   [512]                     512
fc1/W      [512, 10]                5120
fc1/b      [10]                       10[36m
Number of trainable variables: 22
Number of parameters (elements): 2082378
Storage space needed for all trainable variables: 7.94MB[0m
[32m[0715 20:53:08 @base.py:207][0m Setup callbacks graph ...
[32m[0715 20:53:08 @argtools.py:138][0m [5m[31mWRN[0m Starting a process with 'fork' method is efficient but not safe and may cause deadlock or crash.Use 'forkserver' or 'spawn' method instead if you run into such issues.See https://docs.python.org/3/library/multiprocessing.html#contexts-and-start-methods on how to set them.
[32m[0715 20:53:08 @argtools.py:138][0m [5m[31mWRN[0m "import prctl" failed! Install python-prctl so that processes can be cleaned with guarantee.
[32m[0715 20:53:09 @inference_runner.py:148][0m [InferenceRunner] Building tower 'InferenceTower' on device /gpu:0 ...
[32m[0715 20:53:09 @<ipython-input-4-d341d09236ea>:114][0m Binarizing weight conv0/W
[32m[0715 20:53:09 @<ipython-input-4-d341d09236ea>:114][0m Binarizing weight conv1/W
[32m[0715 20:53:09 @<ipython-input-4-d341d09236ea>:114][0m Binarizing weight conv2/W
[32m[0715 20:53:09 @<ipython-input-4-d341d09236ea>:114][0m Binarizing weight conv3/W
[32m[0715 20:53:10 @<ipython-input-4-d341d09236ea>:114][0m Binarizing weight conv4/W
[32m[0715 20:53:10 @<ipython-input-4-d341d09236ea>:114][0m Binarizing weight conv5/W
[32m[0715 20:53:10 @<ipython-input-4-d341d09236ea>:114][0m Binarizing weight conv6/W
[32m[0715 20:53:10 @<ipython-input-4-d341d09236ea>:114][0m Binarizing weight fc1/W
[32m[0715 20:53:11 @summary.py:47][0m [MovingAverageSummary] 5 operations in collection 'MOVING_SUMMARY_OPS' will be run with session hooks.
[32m[0715 20:53:11 @summary.py:94][0m Summarizing collection 'summaries' of size 22.
[32m[0715 20:53:11 @graph.py:99][0m Applying collection UPDATE_OPS of 12 ops.
[32m[0715 20:53:11 @base.py:228][0m Creating the session ...
[32m[0715 20:53:13 @base.py:234][0m Initializing the session ...
[32m[0715 20:53:13 @base.py:241][0m Graph Finalized.
[32m[0715 20:53:13 @concurrency.py:37][0m Starting EnqueueThread: enqueue dataflow to TF queue "QueueInput/input_queue" ...
[32m[0715 20:53:13 @inference_runner.py:95][0m [InferenceRunner] Will eval 204 iterations
[32m[0715 20:53:13 @base.py:273][0m Start Epoch 1 ...
[32m[0715 20:59:35 @base.py:291][0m Detected Ctrl-C and exiting main loop.
[32m[0715 20:59:35 @input_source.py:177][0m [EnqueueThread] Thread EnqueueThread: enqueue dataflow to TF queue "QueueInput/input_queue" Exited.
