[32m[0721 21:32:36 @logger.py:92][0m Argv: /usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py -f /root/.local/share/jupyter/runtime/kernel-b5b3c3e8-7cd5-4670-bbd6-bf8d3ba9e586.json
[32m[0721 21:32:37 @parallel.py:340][0m [MultiProcessRunnerZMQ] Will fork a dataflow more than one times. This assumes the datapoints are i.i.d.
[32m[0721 21:32:37 @input_source.py:221][0m Setting up the queue 'QueueInput/input_queue' for CPU prefetching ...
[32m[0721 21:32:37 @trainers.py:48][0m Building graph for a single training tower ...
[32m[0721 21:32:37 @<ipython-input-9-1b6bc8653604>:114][0m Binarizing weight conv0/W
[32m[0721 21:32:37 @<ipython-input-9-1b6bc8653604>:114][0m Binarizing weight conv1/W
[32m[0721 21:32:37 @<ipython-input-9-1b6bc8653604>:114][0m Binarizing weight conv2/W
[32m[0721 21:32:37 @<ipython-input-9-1b6bc8653604>:114][0m Binarizing weight conv3/W
[32m[0721 21:32:37 @<ipython-input-9-1b6bc8653604>:114][0m Binarizing weight conv4/W
[32m[0721 21:32:37 @<ipython-input-9-1b6bc8653604>:114][0m Binarizing weight conv5/W
[32m[0721 21:32:37 @<ipython-input-9-1b6bc8653604>:114][0m Binarizing weight conv6/W
[32m[0721 21:32:37 @<ipython-input-9-1b6bc8653604>:114][0m Binarizing weight fc1/W
[32m[0721 21:32:37 @regularize.py:97][0m regularize_cost() found 1 variables to regularize.
[32m[0721 21:32:37 @regularize.py:21][0m The following tensors will be regularized: fc1/W:0
[32m[0721 21:32:38 @model_utils.py:67][0m [36mList of Trainable Variables: 
[0mname       shape               #elements
---------  ----------------  -----------
conv0/W    [5, 5, 1, 48]            1200
conv0/b    [48]                       48
conv1/W    [3, 3, 48, 64]          27648
bn1/gamma  [64]                       64
bn1/beta   [64]                       64
conv2/W    [3, 3, 64, 64]          36864
bn2/gamma  [64]                       64
bn2/beta   [64]                       64
conv3/W    [3, 3, 64, 128]         73728
bn3/gamma  [128]                     128
bn3/beta   [128]                     128
conv4/W    [3, 3, 128, 128]       147456
bn4/gamma  [128]                     128
bn4/beta   [128]                     128
conv5/W    [3, 3, 128, 128]       147456
bn5/gamma  [128]                     128
bn5/beta   [128]                     128
conv6/W    [5, 5, 128, 512]      1638400
bn6/gamma  [512]                     512
bn6/beta   [512]                     512
fc1/W      [512, 10]                5120
fc1/b      [10]                       10[36m
Number of trainable variables: 22
Number of parameters (elements): 2079978
Storage space needed for all trainable variables: 7.93MB[0m
[32m[0721 21:32:38 @base.py:207][0m Setup callbacks graph ...
[32m[0721 21:32:38 @argtools.py:138][0m [5m[31mWRN[0m "import prctl" failed! Install python-prctl so that processes can be cleaned with guarantee.
[32m[0721 21:32:39 @inference_runner.py:148][0m [InferenceRunner] Building tower 'InferenceTower' on device /gpu:0 ...
[32m[0721 21:32:39 @<ipython-input-9-1b6bc8653604>:114][0m Binarizing weight conv0/W
[32m[0721 21:32:39 @<ipython-input-9-1b6bc8653604>:114][0m Binarizing weight conv1/W
[32m[0721 21:32:40 @<ipython-input-9-1b6bc8653604>:114][0m Binarizing weight conv2/W
[32m[0721 21:32:40 @<ipython-input-9-1b6bc8653604>:114][0m Binarizing weight conv3/W
[32m[0721 21:32:40 @<ipython-input-9-1b6bc8653604>:114][0m Binarizing weight conv4/W
[32m[0721 21:32:40 @<ipython-input-9-1b6bc8653604>:114][0m Binarizing weight conv5/W
[32m[0721 21:32:40 @<ipython-input-9-1b6bc8653604>:114][0m Binarizing weight conv6/W
[32m[0721 21:32:41 @<ipython-input-9-1b6bc8653604>:114][0m Binarizing weight fc1/W
[32m[0721 21:32:41 @summary.py:47][0m [MovingAverageSummary] 5 operations in collection 'MOVING_SUMMARY_OPS' will be run with session hooks.
[32m[0721 21:32:41 @summary.py:94][0m Summarizing collection 'summaries' of size 22.
[32m[0721 21:32:41 @graph.py:99][0m Applying collection UPDATE_OPS of 12 ops.
[32m[0721 21:32:41 @base.py:228][0m Creating the session ...
[32m[0721 21:32:42 @base.py:234][0m Initializing the session ...
[32m[0721 21:32:42 @base.py:241][0m Graph Finalized.
[32m[0721 21:32:42 @concurrency.py:37][0m Starting EnqueueThread: enqueue dataflow to TF queue "QueueInput/input_queue" ...
[32m[0721 21:32:42 @inference_runner.py:95][0m [InferenceRunner] Will eval 79 iterations
[32m[0721 21:32:42 @monitor.py:361][0m [5m[31mWRN[0m History epoch=10 from JSON is not the predecessor of the current starting_epoch=1
[32m[0721 21:32:42 @monitor.py:362][0m [5m[31mWRN[0m If you want to resume old training, either use `AutoResumeTrainConfig` or correctly set the new starting_epoch yourself to avoid inconsistency. 
[32m[0721 21:32:42 @monitor.py:369][0m [5m[31mWRN[0m Now, we will train with starting_epoch=1 and backup old json to train_log/mnist-dorefa-6,4,4/stats.json.0721-213242
[32m[0721 21:32:42 @base.py:273][0m Start Epoch 1 ...
[32m[0721 21:32:56 @base.py:283][0m Epoch 1 (global_step 468) finished, time:13.9 seconds.
[32m[0721 21:32:56 @saver.py:82][0m Model saved to train_log/mnist-dorefa-6,4,4/model-468.
[32m[0721 21:32:57 @monitor.py:476][0m QueueInput/queue_size: 50
[32m[0721 21:32:57 @monitor.py:476][0m accuracy: 0.099199
[32m[0721 21:32:57 @monitor.py:476][0m cost: 2.4533
[32m[0721 21:32:57 @monitor.py:476][0m cross_entropy_loss: 2.4533
[32m[0721 21:32:57 @monitor.py:476][0m param-summary/conv0/W-rms: 0.2799
[32m[0721 21:32:57 @monitor.py:476][0m param-summary/conv1/W-rms: 0.067901
[32m[0721 21:32:57 @monitor.py:476][0m param-summary/conv2/W-rms: 0.059015
[32m[0721 21:32:57 @monitor.py:476][0m param-summary/conv3/W-rms: 0.058944
[32m[0721 21:32:57 @monitor.py:476][0m param-summary/conv4/W-rms: 0.041594
[32m[0721 21:32:57 @monitor.py:476][0m param-summary/conv5/W-rms: 0.041763
[32m[0721 21:32:57 @monitor.py:476][0m param-summary/conv6/W-rms: 0.025079
[32m[0721 21:32:57 @monitor.py:476][0m param-summary/fc1/W-rms: 0.04752
[32m[0721 21:32:57 @monitor.py:476][0m regularize_cost: 5.8743e-07
[32m[0721 21:32:57 @monitor.py:476][0m train_error: 0.9008
[32m[0721 21:32:57 @monitor.py:476][0m val_accuracy: 0.10127
[32m[0721 21:32:57 @monitor.py:476][0m val_cross_entropy_loss: 2.3141
[32m[0721 21:32:57 @base.py:273][0m Start Epoch 2 ...
[32m[0721 21:33:10 @base.py:283][0m Epoch 2 (global_step 936) finished, time:12.7 seconds.
[32m[0721 21:33:10 @saver.py:82][0m Model saved to train_log/mnist-dorefa-6,4,4/model-936.
[32m[0721 21:33:11 @monitor.py:476][0m QueueInput/queue_size: 50
[32m[0721 21:33:11 @monitor.py:476][0m accuracy: 0.097104
[32m[0721 21:33:11 @monitor.py:476][0m cost: 2.3971
[32m[0721 21:33:11 @monitor.py:476][0m cross_entropy_loss: 2.3971
[32m[0721 21:33:11 @monitor.py:476][0m param-summary/conv0/W-rms: 0.28045
[32m[0721 21:33:11 @monitor.py:476][0m param-summary/conv1/W-rms: 0.067901
[32m[0721 21:33:11 @monitor.py:476][0m param-summary/conv2/W-rms: 0.059015
[32m[0721 21:33:11 @monitor.py:476][0m param-summary/conv3/W-rms: 0.058944
[32m[0721 21:33:11 @monitor.py:476][0m param-summary/conv4/W-rms: 0.041594
[32m[0721 21:33:11 @monitor.py:476][0m param-summary/conv5/W-rms: 0.041763
[32m[0721 21:33:11 @monitor.py:476][0m param-summary/conv6/W-rms: 0.025107
[32m[0721 21:33:11 @monitor.py:476][0m param-summary/fc1/W-rms: 0.04075
[32m[0721 21:33:11 @monitor.py:476][0m regularize_cost: 4.3011e-07
[32m[0721 21:33:11 @monitor.py:476][0m train_error: 0.9029
[32m[0721 21:33:11 @monitor.py:476][0m val_accuracy: 0.089597
[32m[0721 21:33:11 @monitor.py:476][0m val_cross_entropy_loss: 2.3043
[32m[0721 21:33:11 @base.py:273][0m Start Epoch 3 ...
[32m[0721 21:33:24 @base.py:283][0m Epoch 3 (global_step 1404) finished, time:12.9 seconds.
[32m[0721 21:33:24 @saver.py:82][0m Model saved to train_log/mnist-dorefa-6,4,4/model-1404.
[32m[0721 21:33:25 @monitor.py:476][0m QueueInput/queue_size: 50
[32m[0721 21:33:25 @monitor.py:476][0m accuracy: 0.10593
[32m[0721 21:33:25 @monitor.py:476][0m cost: 2.3476
[32m[0721 21:33:25 @monitor.py:476][0m cross_entropy_loss: 2.3476
[32m[0721 21:33:25 @monitor.py:476][0m param-summary/conv0/W-rms: 0.28119
[32m[0721 21:33:25 @monitor.py:476][0m param-summary/conv1/W-rms: 0.067901
[32m[0721 21:33:25 @monitor.py:476][0m param-summary/conv2/W-rms: 0.059015
[32m[0721 21:33:25 @monitor.py:476][0m param-summary/conv3/W-rms: 0.058944
[32m[0721 21:33:25 @monitor.py:476][0m param-summary/conv4/W-rms: 0.041594
[32m[0721 21:33:25 @monitor.py:476][0m param-summary/conv5/W-rms: 0.041763
[32m[0721 21:33:25 @monitor.py:476][0m param-summary/conv6/W-rms: 0.025129
[32m[0721 21:33:25 @monitor.py:476][0m param-summary/fc1/W-rms: 0.036342
[32m[0721 21:33:25 @monitor.py:476][0m regularize_cost: 3.4069e-07
[32m[0721 21:33:25 @monitor.py:476][0m train_error: 0.89407
[32m[0721 21:33:25 @monitor.py:476][0m val_accuracy: 0.11363
[32m[0721 21:33:25 @monitor.py:476][0m val_cross_entropy_loss: 2.302
[32m[0721 21:33:25 @base.py:273][0m Start Epoch 4 ...
[32m[0721 21:33:38 @base.py:283][0m Epoch 4 (global_step 1872) finished, time:12.9 seconds.
[32m[0721 21:33:38 @saver.py:82][0m Model saved to train_log/mnist-dorefa-6,4,4/model-1872.
[32m[0721 21:33:39 @monitor.py:476][0m QueueInput/queue_size: 50
[32m[0721 21:33:39 @monitor.py:476][0m accuracy: 0.096387
[32m[0721 21:33:39 @monitor.py:476][0m cost: 2.346
[32m[0721 21:33:39 @monitor.py:476][0m cross_entropy_loss: 2.346
[32m[0721 21:33:39 @monitor.py:476][0m param-summary/conv0/W-rms: 0.28197
[32m[0721 21:33:39 @monitor.py:476][0m param-summary/conv1/W-rms: 0.067901
[32m[0721 21:33:39 @monitor.py:476][0m param-summary/conv2/W-rms: 0.059015
[32m[0721 21:33:39 @monitor.py:476][0m param-summary/conv3/W-rms: 0.058944
[32m[0721 21:33:39 @monitor.py:476][0m param-summary/conv4/W-rms: 0.041594
[32m[0721 21:33:39 @monitor.py:476][0m param-summary/conv5/W-rms: 0.041763
[32m[0721 21:33:39 @monitor.py:476][0m param-summary/conv6/W-rms: 0.025147
[32m[0721 21:33:39 @monitor.py:476][0m param-summary/fc1/W-rms: 0.033207
[32m[0721 21:33:39 @monitor.py:476][0m regularize_cost: 2.8392e-07
[32m[0721 21:33:39 @monitor.py:476][0m train_error: 0.90361
[32m[0721 21:33:39 @monitor.py:476][0m val_accuracy: 0.11363
[32m[0721 21:33:39 @monitor.py:476][0m val_cross_entropy_loss: 2.3015
[32m[0721 21:33:39 @base.py:273][0m Start Epoch 5 ...
[32m[0721 21:33:51 @base.py:283][0m Epoch 5 (global_step 2340) finished, time:12.8 seconds.
[32m[0721 21:33:51 @saver.py:82][0m Model saved to train_log/mnist-dorefa-6,4,4/model-2340.
[32m[0721 21:33:52 @monitor.py:476][0m QueueInput/queue_size: 50
[32m[0721 21:33:52 @monitor.py:476][0m accuracy: 0.092312
[32m[0721 21:33:52 @monitor.py:476][0m cost: 2.3364
[32m[0721 21:33:52 @monitor.py:476][0m cross_entropy_loss: 2.3364
[32m[0721 21:33:52 @monitor.py:476][0m param-summary/conv0/W-rms: 0.2828
[32m[0721 21:33:52 @monitor.py:476][0m param-summary/conv1/W-rms: 0.067901
[32m[0721 21:33:52 @monitor.py:476][0m param-summary/conv2/W-rms: 0.059015
[32m[0721 21:33:52 @monitor.py:476][0m param-summary/conv3/W-rms: 0.058944
[32m[0721 21:33:52 @monitor.py:476][0m param-summary/conv4/W-rms: 0.041594
[32m[0721 21:33:52 @monitor.py:476][0m param-summary/conv5/W-rms: 0.041763
[32m[0721 21:33:53 @monitor.py:476][0m param-summary/conv6/W-rms: 0.025338
[32m[0721 21:33:53 @monitor.py:476][0m param-summary/fc1/W-rms: 0.030889
[32m[0721 21:33:53 @monitor.py:476][0m regularize_cost: 2.4535e-07
[32m[0721 21:33:53 @monitor.py:476][0m train_error: 0.90769
[32m[0721 21:33:53 @monitor.py:476][0m val_accuracy: 0.097607
[32m[0721 21:33:53 @monitor.py:476][0m val_cross_entropy_loss: 2.3027
[32m[0721 21:33:53 @base.py:273][0m Start Epoch 6 ...
[32m[0721 21:34:05 @base.py:283][0m Epoch 6 (global_step 2808) finished, time:12.6 seconds.
[32m[0721 21:34:05 @saver.py:82][0m Model saved to train_log/mnist-dorefa-6,4,4/model-2808.
[32m[0721 21:34:06 @monitor.py:476][0m QueueInput/queue_size: 50
[32m[0721 21:34:06 @monitor.py:476][0m accuracy: 0.097781
[32m[0721 21:34:06 @monitor.py:476][0m cost: 2.3366
[32m[0721 21:34:06 @monitor.py:476][0m cross_entropy_loss: 2.3366
[32m[0721 21:34:06 @monitor.py:476][0m param-summary/conv0/W-rms: 0.28379
[32m[0721 21:34:06 @monitor.py:476][0m param-summary/conv1/W-rms: 0.067901
[32m[0721 21:34:06 @monitor.py:476][0m param-summary/conv2/W-rms: 0.059015
[32m[0721 21:34:06 @monitor.py:476][0m param-summary/conv3/W-rms: 0.058944
[32m[0721 21:34:06 @monitor.py:476][0m param-summary/conv4/W-rms: 0.041594
[32m[0721 21:34:06 @monitor.py:476][0m param-summary/conv5/W-rms: 0.041763
[32m[0721 21:34:06 @monitor.py:476][0m param-summary/conv6/W-rms: 0.025355
[32m[0721 21:34:06 @monitor.py:476][0m param-summary/fc1/W-rms: 0.029379
[32m[0721 21:34:06 @monitor.py:476][0m regularize_cost: 2.2177e-07
[32m[0721 21:34:06 @monitor.py:476][0m train_error: 0.90222
[32m[0721 21:34:06 @monitor.py:476][0m val_accuracy: 0.10265
[32m[0721 21:34:06 @monitor.py:476][0m val_cross_entropy_loss: 2.3023
[32m[0721 21:34:06 @base.py:273][0m Start Epoch 7 ...
[32m[0721 21:34:19 @input_source.py:177][0m [EnqueueThread] Thread EnqueueThread: enqueue dataflow to TF queue "QueueInput/input_queue" Exited.
